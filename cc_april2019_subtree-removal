#include<bits/stdc++.h>
using namespace std;
#define ll long long

ll max_profit(int u, vector<int> adj[],int a[],vector<bool>& vis,int x)
{
    vis[u]=true; // set the current node to true in visited vector
    
    /* calculate sum of all subtree node values */

    ll sum = a[u]; 
    for(unsigned int i=0;i<adj[u].size();++i)
    {
        if(!vis[adj[u][i]])
            sum += max_profit(adj[u][i],adj,a,vis,x);
    }   
    return max((long long)-x,sum); /* check if cutting the subtree at a cost of subtracting X from the Profit or 
    adding the subtree's sum to Profit is a better option */
}   

int main()
{
    int t;
    scanf("%d",&t);
    while(t--)
    {
    	int n,x;
    	scanf("%d%d",&n,&x);
    	int inp[n+1];
    	vector<int> adj[n+1];
    	for(int i=1;i<=n;++i)
    		scanf("%d",&inp[i]);
    	for(int i=1;i<=n-1;++i)
    	{
    		int u,v;
    		scanf("%d%d",&u,&v);
    		adj[u].push_back(v);
    		adj[v].push_back(u);
    	}
        vector<bool> visited(n+1,false); //to avoid visiting the same node again 
        ll ans = max_profit(1,adj,inp,visited,x);
        printf("%lld\n", ans);
    }
    return 0;
}
